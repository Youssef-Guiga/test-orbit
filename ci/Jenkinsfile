pipeline {
    agent any
    
    environment {
        DEPLOY_ENV = 'production'
        API_KEY = credentials('API_KEY_SECRET')  // âœ… Fixed: Use Jenkins credentials
    }
    
    stages {
        stage('Checkout & Setup') {
            steps {
                checkout scm
                // Install Python dependencies if needed
                sh 'python -m pip install --upgrade pip'
            }
        }
        
        stage('Build') {
            steps {
                script {
                    // Run main.py to verify build
                    sh 'python src/main.py'
                    

                }
            }
        }
        
        stage('Test') {
            steps {
                // Run your dummy test
                sh 'python -m pytest src/test_dummy.py -v --junitxml=test-results/results.xml'
            }
            post {
                always {
                    // Store test results (JUnit format)
                    junit '**/test-results/*.xml'  // Requires pytest-junit plugin
                }
            }
        }
        
        stage('Security Scan') {
            when {
                expression { params.RUN_SCAN }
            }
            steps {
                // Example: Bandit for Python security scanning
                sh 'python -m pip install bandit'
                sh 'python -m bandit -r . -f xml -o security-scan.xml'
                archiveArtifacts 'security-scan.xml'
            }
        }
        
        stage('Verify') {
            steps {
                script {
                    if (fileExists('verify/verify.sh')) {
                        sh '/verify/verify.sh'
                    } else {
                        error 'Verification script missing'
                    }
                }
            }
        }
    }
    
    post {
        failure {
            // Real notification (e.g., email, Slack)
            echo 'Pipeline failed - Sending notifications'
        }
        success {
            echo 'Pipeline succeeded! ðŸŽ‰'
        }
    }
}
